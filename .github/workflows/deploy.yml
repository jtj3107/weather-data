# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: deploy

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [closed]

jobs:
   backend_build_and_deploy:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [18.17.0]

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Check Npm -v
        run: npm -v

      - name: Set env from secrets
        run: |
          echo "DBHOST=${{ secrets.DBHOST }}" >> $GITHUB_ENV
          echo "DATABASE=${{ secrets.DATABASE }}" >> $GITHUB_ENV
          echo "DBPASSWORD=${{ secrets.DBPASSWORD }}" >> $GITHUB_ENV
          echo "DBUSER=${{ secrets.DBUSER }}" >> $GITHUB_ENV
          echo "REACT_APP_KAKAO_MAP_APP_KEY=${{ secrets.REACT_APP_KAKAO_MAP_APP_KEY }}" >> $GITHUB_ENV

      - name: create env file
        working-directory: ./
        run: |
          touch .env
          echo DBHOST=${{ secrets.DBHOST }} >> .env
          echo DATABASE=${{ secrets.DATABASE }} >> .env
          echo DBPASSWORD=${{ secrets.DBPASSWORD }} >> .env
          echo DBUSER=${{ secrets.DBUSER }} >> .env
          echo REACT_APP_KAKAO_MAP_APP_KEY=${{ secrets.REACT_APP_KAKAO_MAP_APP_KEY }} >> .env
          cat .env

      - name: build server files
        working-directory: ./backend
        run: |
          yarn
          yarn run build

      - name: zip server files
        run: zip -r hous.zip ./backend/dist ./backend/scripts ./backend/appspec.yml ./backend/.env ./backend/package.json

      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: upload server files to S3
        run: aws s3 cp --region ap-northeast-2 ./hous.zip s3://weather.tj/deploy/

      - name: deploy with AWS codeDeploy
        run: |
          aws deploy create-deployment --application-name tj-code-deploy --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name GROUP --s3-location bucket=weather.tj,bundleType=zip,key=deploy/hous.zip

   frontend_build_and_deploy:
    needs: backend_build_and_deploy
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [18.17.0]

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies and build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build

      - name: Configure AWS credentials for frontend
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload .next build to S3
        working-directory: ./frontend/out
        run: aws s3 sync ./ s3://weather-data-frontend/path/

      # public 폴더나 다른 리소스가 필요하면 아래와 같이 추가해서 업로드
      - name: Upload public folder to S3
        working-directory: ./frontend/public
        run: aws s3 sync ./ s3://weather-data-frontend/path/public/
